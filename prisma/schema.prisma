// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  avatar        String? // Optional avatar URL or initials
  assignedTasks Task[]   @relation("TaskAssignee")
  createdTasks  Task[]   @relation("TaskCreator")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Board {
  id          String         @id @default(uuid())
  title       String
  description String?
  tasks       Task[]
  columns     StatusColumn[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model StatusColumn {
  id        String   @id @default(uuid())
  boardId   String
  name      String // "TODO", "In Review", "Blocked", etc.
  order     Int // Display order
  color     String? // Hex color like "#FF6B6B"
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  tasks     Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([boardId, order])
  @@unique([boardId, name]) // Prevent duplicate column names per board
}

model Task {
  id          String        @id @default(uuid())
  title       String
  description String?
  columnId    String
  column      StatusColumn  @relation(fields: [columnId], references: [id], onDelete: Cascade)
  order       Int           @default(0)
  boardId     String
  board       Board         @relation(fields: [boardId], references: [id], onDelete: Cascade)
  assigneeId  String?
  assignee    User?         @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  creatorId   String
  creator     User          @relation("TaskCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  history     TaskHistory[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([boardId])
  @@index([columnId, order])
  @@index([boardId, columnId, order])
  @@index([assigneeId])
  @@index([creatorId])
}

model TaskHistory {
  id        String   @id @default(uuid())
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  field     String // "column", "assignee", "title", "description"
  oldValue  String?
  newValue  String?
  changedAt DateTime @default(now())

  @@index([taskId, changedAt])
}

// Keep old enum for reference, but it's no longer used
enum TaskStatus {
  TODO
  DOING
  DONE
}
